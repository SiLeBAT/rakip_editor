package de.bund.bfr.rakip

import java.util.*

private var messages = ResourceBundle.getBundle("MessagesBundle", Locale.getDefault())!!

val REFERENCE_TYPE: String = messages.getString("GM.EditReferencePanel.typeLabel")
val REFERENCE_DATE: String = messages.getString("GM.EditReferencePanel.dateLabel")
val REFERENCE_DOI: String = messages.getString("GM.EditReferencePanel.doiLabel")
val REFERENCE_AUTHORLIST: String = messages.getString("GM.EditReferencePanel.authorListLabel")
val REFERENCE_TITLE: String = messages.getString("GM.EditReferencePanel.titleLabel")
val REFERENCE_ABSTRACT: String = messages.getString("GM.EditReferencePanel.abstractLabel")
val REFERENCE_JOURNAL: String = messages.getString("GM.EditReferencePanel.journalLabel")
val REFERENCE_VOLUME: String = messages.getString("GM.EditReferencePanel.volumeLabel")
val REFERENCE_ISSUE: String = messages.getString("GM.EditReferencePanel.issueLabel")
val REFERENCE_WEBSITE: String = messages.getString("GM.EditReferencePanel.websiteLabel")

val CREATOR_GIVENNAME: String = messages.getString("GM.EditCreatorPanel.givenNameLabel")
val CREATOR_FAMILYNAME: String = messages.getString("GM.EditCreatorPanel.familyNameLabel")
val CREATOR_CONTACT: String = messages.getString("GM.EditCreatorPanel.contactLabel")

val PRODUCT_NAME: String = messages.getString("GM.EditProductPanel.envNameLabel")
val PRODUCT_DESC: String = messages.getString("GM.EditProductPanel.envDescriptionLabel")
val PRODUCT_UNIT: String = messages.getString("GM.EditProductPanel.envUnitLabel")
val PRODUCT_PRODUCTIONMETHOD: String = messages.getString("GM.EditProductPanel.productionMethodLabel")
val PRODUCT_PACKAGING: String = messages.getString("GM.EditProductPanel.packagingLabel")
val PRODUCT_TREATMENT: String = messages.getString("GM.EditProductPanel.productTreatmentLabel")
val PRODUCT_ORIGINCOUNTRY: String = messages.getString("GM.EditProductPanel.originCountryLabel")
val PRODUCT_ORIGINAREA: String = messages.getString("GM.EditProductPanel.originAreaLabel")
val PRODUCT_FISHERIES: String = messages.getString("GM.EditProductPanel.fisheriesAreaLabel")
val PRODUCT_PRODUCTIONDATE: String = messages.getString("GM.EditProductPanel.productionDateLabel")
val PRODUCT_EXPIRATIONDATE: String = messages.getString("GM.EditProductPanel.expirationDateLabel")

val HAZARD_TYPE: String = messages.getString("GM.EditHazardPanel.hazardTypeLabel")
val HAZARD_NAME: String = messages.getString("GM.EditHazardPanel.hazardNameLabel")
val HAZARD_DESCRIPTION: String = messages.getString("GM.EditHazardPanel.hazardDescriptionLabel")
val HAZARD_UNIT: String = messages.getString("GM.EditHazardPanel.hazardUnitLabel")
val HAZARD_ADVERSE: String = messages.getString("GM.EditHazardPanel.adverseEffectLabel")
val HAZARD_ORIGIN: String = messages.getString("GM.EditHazardPanel.originLabel")
val HAZARD_BMD: String = messages.getString("GM.EditHazardPanel.bmdLabel")
val HAZARD_RESIDUE: String = messages.getString("GM.EditHazardPanel.maxResidueLimitLabel")
val HAZARD_NOADVERSE: String = messages.getString("GM.EditHazardPanel.noObservedAdverseLabel")
val HAZARD_LOWESTADVERSE: String = messages.getString("GM.EditHazardPanel.lowestObserveLabel")
val HAZARD_ACCEPTABLEOPERATOR: String = messages.getString("GM.EditHazardPanel.acceptableOperatorLabel")
val HAZARD_ACUTEDOSE: String = messages.getString("GM.EditHazardPanel.acuteReferenceDoseLabel")
val HAZARD_DAILYINTAKE: String = messages.getString("GM.EditHazardPanel.acceptableDailyIntakeLabel")
val HAZARD_INDSUM: String = messages.getString("GM.EditHazardPanel.indSumLabel")
val HAZARD_LABNAME: String = messages.getString("GM.EditHazardPanel.labNameLabel")
val HAZARD_LABCOUNTRY: String = messages.getString("GM.EditHazardPanel.labCountryLabel")
val HAZARD_DETECTIONLIM: String = messages.getString("GM.EditHazardPanel.detectionLimitLabel")
val HAZARD_QUANTIFICATIONLIM: String = messages.getString("GM.EditHazardPanel.quantificationLimitLabel")
val HAZARD_CENSOREDDATA: String = messages.getString("GM.EditHazardPanel.leftCensoredDataLabel")
val HAZARD_CONTAMINATION: String = messages.getString("GM.EditHazardPanel.contaminationRangeLabel")

val PG_NAME: String = messages.getString("GM.EditPopulationGroupPanel.populationNameLabel")
val PG_TARGET: String = messages.getString("GM.EditPopulationGroupPanel.targetPopulationLabel")
val PG_SPAN: String = messages.getString("GM.EditPopulationGroupPanel.populationSpanLabel")
val PG_DESC: String = messages.getString("GM.EditPopulationGroupPanel.populationDescriptionLabel")
val PG_AGE: String = messages.getString("GM.EditPopulationGroupPanel.populationAgeLabel")
val PG_GENDER: String = messages.getString("GM.EditPopulationGroupPanel.populationGenderLabel")
val PG_BMI: String = messages.getString("GM.EditPopulationGroupPanel.bmiLabel")
val PG_DIETGROUPS: String = messages.getString("GM.EditPopulationGroupPanel.specialDietGroupsLabel")
val PG_PATTERNCONSUMPTION: String = messages.getString(("GM.EditPopulationGroupPanel.patternConsumptionLabel"))
val PG_REGION: String = messages.getString("GM.EditPopulationGroupPanel.regionLabel")
val PG_COUNTRY: String = messages.getString("GM.EditPopulationGroupPanel.countryLabel")
val PG_RISK: String = messages.getString("GM.EditPopulationGroupPanel.riskAndPopulationLabel")
val PG_SEASON: String = messages.getString("GM.EditPopulationGroupPanel.seasonLabel")

val DB_STUDYSAMPLE: String = messages.getString("GM.DataBackgroundPanel.studySampleLabel")
val DB_DIETARYASSESSMENTMETHOD: String = messages.getString("GM.DataBackgroundPanel.dietaryAssessmentMethodLabel")
val DB_ACCREDITATION: String = messages.getString("GM.DataBackgroundPanel.laboratoryAccreditationLabel")
val DB_ASSAY: String = messages.getString("GM.DataBackgroundPanel.assayLabel")

val STUDY_TITLE: String = messages.getString("GM.StudyPanel.studyTitleLabel")
val STUDY_DESC: String = messages.getString("GM.StudyPanel.studyDescriptionLabel")
val STUDY_DESIGN: String = messages.getString("GM.StudyPanel.studyDesignTypeLabel")
val STUDY_MEASUREMENT: String = messages.getString("GM.StudyPanel.studyAssayMeasurementsTypeLabel")
val STUDY_TECH_TYPE: String = messages.getString("GM.StudyPanel.studyAssayTechnologyTypeLabel")
val STUDY_TECH_PLAT: String = messages.getString("GM.StudyPanel.studyAssayTechnologyPlatformLabel")
val STUDY_ACCREDITATION: String = messages.getString("GM.StudyPanel.accreditationProcedureLabel")
val STUDY_PROTOCOL_NAME: String = messages.getString("GM.StudyPanel.protocolNameLabel")
val STUDY_PROTOCOL_TYPE: String = messages.getString("GM.StudyPanel.protocolTypeLabel")
val STUDY_PROTOCOL_DESC: String = messages.getString("GM.StudyPanel.protocolDescriptionLabel")
val STUDY_PROTOCOL_URI: String = messages.getString("GM.StudyPanel.protocolURILabel")
val STUDY_PROTOCOL_VERSION: String = messages.getString("GM.StudyPanel.protocolVersionLabel")
val STUDY_PARAMETERS: String = messages.getString("GM.StudyPanel.parametersLabel")
val STUDY_COMPONENTS_TYPE: String = messages.getString("GM.StudyPanel.componentsTypeLabel")

val SS_SAMPLE: String = messages.getString("GM.EditStudySamplePanel.sampleNameLabel")
val SS_MOISTURE_PERC: String = messages.getString("GM.EditStudySamplePanel.moisturePercentageLabel")
val SS_FAT_PERC: String = messages.getString("GM.EditStudySamplePanel.fatPercentageLabel")
val SS_SAMPLE_PROTOCOL: String = messages.getString("GM.EditStudySamplePanel.sampleProtocolLabel")
val SS_SAMPLING_STRATEGY: String = messages.getString("GM.EditStudySamplePanel.samplingStrategyLabel")
val SS_SAMPLING_TYPE: String = messages.getString("GM.EditStudySamplePanel.samplingTypeLabel")
val SS_SAMPLING_METHOD: String = messages.getString("GM.EditStudySamplePanel.samplingMethodLabel")
val SS_SAMPLING_PLAN: String = messages.getString("GM.EditStudySamplePanel.samplingPlanLabel")
val SS_SAMPLING_WEIGHT: String = messages.getString("GM.EditStudySamplePanel.samplingWeightLabel")
val SS_SAMPLING_SIZE: String = messages.getString("GM.EditStudySamplePanel.samplingSizeLabel")
val SS_LOT_UNIT: String = messages.getString("GM.EditStudySamplePanel.lotSizeUnitLabel")
val SS_SAMPLING_POINT: String = messages.getString("GM.EditStudySamplePanel.samplingPointLabel")

val DAM_TOOL: String = messages.getString("GM.EditDietaryAssessmentMethodPanel.dataCollectionToolLabel")
val DAM_NUMBER_NON_CONSECUTIVE: String = messages.getString("GM.EditDietaryAssessmentMethodPanel.nonConsecutiveOneDaysLabel")
val DAM_SOFTWARE: String = messages.getString("GM.EditDietaryAssessmentMethodPanel.dietarySoftwareToolLabel")
val DAM_FOOD_ITEM: String = messages.getString("GM.EditDietaryAssessmentMethodPanel.foodItemNumberLabel")
val DAM_NON_CONSECUTIVE: String = messages.getString("GM.EditDietaryAssessmentMethodPanel.nonConsecutiveOneDaysLabel")
val DAM_RECORD_TYPE: String = messages.getString("GM.EditDietaryAssessmentMethodPanel.recordTypeLabel")

val ASSAY_NAME: String = messages.getString("GM.EditAssayPanel.nameLabel")
val ASSAY_DESC: String = messages.getString("GM.EditAssayPanel.descriptionLabel")

val GI_STUDY_NAME: String = messages.getString("GM.GeneralInformationPanel.studyNameLabel")
val GI_ID: String = messages.getString("GM.GeneralInformationPanel.identifierLabel")
val GI_CREATION_DATE: String = messages.getString("GM.GeneralInformationPanel.creationDateLabel")
val GI_RIGHTS: String = messages.getString("GM.GeneralInformationPanel.rightsLabel")
val GI_URL: String = messages.getString("GM.GeneralInformationPanel.urlLabel")
val GI_FORMAT: String = messages.getString("GM.GeneralInformationPanel.formatLabel")
val GI_LANGUAGE: String = messages.getString("GM.GeneralInformationPanel.languageLabel")
val GI_SOFTWARE: String = messages.getString("GM.GeneralInformationPanel.softwareLabel")
val GI_LANGUAGE_WRITTEN_IN: String = messages.getString("GM.GeneralInformationPanel.languageWrittenInLabel")
val GI_STATUS: String = messages.getString("GM.GeneralInformationPanel.statusLabel")
val GI_OBJECTIVE: String = messages.getString("GM.GeneralInformationPanel.objectiveLabel")
val GI_DESC: String = messages.getString("GM.GeneralInformationPanel.descriptionLabel")

val SCOPE_PRODUCT: String = messages.getString("GM.ScopePanel.productLabel")
val SCOPE_HAZARD: String = messages.getString("GM.ScopePanel.hazardLabel")
val SCOPE_COMMENT: String = messages.getString("GM.ScopePanel.commentLabel")
val SCOPE_TEMPORAL: String = messages.getString("GM.ScopePanel.temporalInformationLabel")
val SCOPE_REGION: String = messages.getString("GM.ScopePanel.regionLabel")
val SCOPE_COUNTRY: String = messages.getString("GM.ScopePanel.countryLabel")

val PARAMETER_ID: String = messages.getString("GM.EditParameterPanel.idLabel")
val PARAMETER_CLASIF: String = messages.getString("GM.EditParameterPanel.classificationLabel")
val PARAMETER_NAME: String = messages.getString("GM.EditParameterPanel.parameterNameLabel")
val PARAMETER_DESC: String = messages.getString("GM.EditParameterPanel.descriptionLabel")
val PARAMETER_TYPE: String = messages.getString("GM.EditParameterPanel.typeLabel")
val PARAMETER_UNIT: String = messages.getString("GM.EditParameterPanel.unitLabel")
val PARAMETER_UNIT_CATEGORY: String = messages.getString("GM.EditParameterPanel.unitCategoryLabel")
val PARAMETER_DATA_TYPE: String = messages.getString("GM.EditParameterPanel.dataTypeLabel")
val PARAMETER_SOURCE: String = messages.getString("GM.EditParameterPanel.sourceLabel")
val PARAMETER_SUBJECT: String = messages.getString("GM.EditParameterPanel.subjectLabel")
val PARAMETER_DIST: String = messages.getString("GM.EditParameterPanel.distributionLabel")
val PARAMETER_VALUE: String = messages.getString("GM.EditParameterPanel.valueLabel")
val PARAMETER_REFERENCE: String = messages.getString("GM.EditParameterPanel.referenceLabel")
val PARAMETER_VARIABILITY: String = messages.getString("GM.EditParameterPanel.variabilitySubjectLabel")
val PARAMETER_APPLICABILITY: String = messages.getString("GM.EditParameterPanel.applicabilityLabel")
val PARAMETER_ERROR: String = messages.getString("GM.EditParameterPanel.errorLabel")

val MODEL_EQUATION_NAME: String = messages.getString("GM.EditModelEquationPanel.nameLabel")
val MODEL_EQUATION_CLASS: String = messages.getString("GM.EditModelEquationPanel.classLabel")
val MODEL_EQUATION_SCRIPT: String = messages.getString("GM.EditModelEquationPanel.scriptLabel")